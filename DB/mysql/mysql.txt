1.mysql的常见存储引擎的特点(show engines)
	MVCC(多版本并发控制),大多数事务性存储引擎都实现了，其他数据库也实现了，各自的实现机制不同
  没有统一的标准(乐观并发控制，悲观并发控制)
	原理：通过保存数据在某个时间点的快照来实现，每个事务不管执行多长时间，看到的数据是一致的。
  根据事务开始时间的不同，每个事务对同一张表，同一时刻看到的数据可能是不一样的
	只在REPEATABLE READ和READ COMMITTED两个隔离级别工作，因为READ UNCOMMITTED总是读取最新的数据行
  SERIALIZABLE会对所有读取的行都加锁
   	InnoDB的MVCC：
   		通过在每行后面保存两个隐藏的列来实现。行的创建时间，过期时间(删除时间),存储的并不是实际的时间值，
   	而是系统版本号，每开始一个事务，系统版本号都会自动递增。事务开始时刻的系统版本号会作为事务的版本号
   		增删改查的具体实现见<<高性能MYSQL>>。
   		通过这两个系统版本号，是大多数操作都不需要加锁，使得读数据操作简单，性能好，不足之处每行记录都需
   	要额外的存储空间，需要更多的行检查工作，维护工作

   InnoDB:
   		处理大量的短期事务，性能和自动崩溃恢复特性，所以在非事务性存储的需求中也流行
   		支持热备份，其他的存储引擎不支持热备份，要获取一致性的视图需要停止对所有表的写入，而在读写混合场景中，停止写入可能意味着停止读取
   		新特性：利用排序创建索引，删除或者增加索引时不需要复制全表数据
   		主键列支持自动增长，插入时：不指定值，指定0或者NULL都是自增的值，指定合法且不存在的值，则此后的自
   	动从该值开始
   	    支持外键
   	    存储格式有3个文件：（存储格式是平台独立的）
   	    	.frm表结构文件：存放表创建时的字段定义等信息
   	    	表的数据文件：存放在innodb_data_home_dir目录下
   	    	表的索引文件：存放在innodb_data_file_path目录下
   	    具备良好的ACID特性
   	    支持行级锁，采用MVCC(多版本并发控制)来支持高并发，默认隔离级别REPEATABLE READ(可重复读)
   	通过间隙锁策略防止幻读，不仅仅锁定查询涉及的行，还会对索引中的间隙进行锁定，以防止幻影行的插入
   		基于聚簇索引建立的，对主键查询有很高的性能，二级索引(非主键索引)中必须包含主键列,所以如果主键列很大，其他索引也很大
   	    缺点：读写效率相对于MYISAM比较差，占用的磁盘空间比较大
   	使用场合：高并发，更新操作比较多的表，需要使用事务的表，对自动灾难恢复有要求的表

   	MYISAM:
   		存储在数据文件和索引文件中：.MYD和.MYI
   		对整张表加锁读取时，加共享锁；写入时，排他锁
   		基于前500个字符创建索引，也支持全文索引(基于分词创建的索引)
   		延迟更新索引键：
   			指定DELAY_KEY_WRITE,每次修改完成后，不会立刻将修改的索引数据写入磁盘，而是会写到内存中的
   		键缓冲区，只有在清理键缓冲区或者关闭表时，才会将对应的索引写入磁盘中。可以极大的提升写入性能
   		但是，数据库或者主机崩溃时会造成索引损坏，需要执行修复操作
   		存储格式
   			静态型：表的所有列定长的，维护和访问预定义格式存储的数据开销很低，但是需要的空间很多
   		原因，数据在存储时，使用每个列的最大空间来存储，有浪费的空间
   			动态型：表中的列不定长。优点：使用空间少。缺点：更新数据时，需要移动数据，产生内部碎片的同时
   		也降低了维和和访问的效率
            建议：1.尽量使用定长的列 2. 使用optimize table语句，整理表中的碎片
            压缩型：只读的数据表，可以通过使用myisampack工具转换为MYISAM压缩表，减少使用的磁盘空间
         减少磁盘IO，从而提高查询性能，也支持索引，是只读的。压缩表中的记录是单独压缩的，读取单行
         的时候不需要去解压整个表，甚至也不用解压行所在的整个页面
        优点：占用空间小，处理速度相对于InnoDB快
        缺点：不支持事务的完整性和并发性，不支持行级锁，崩溃之后无法恢复。最典型的问题是表锁问题

    MEMORY：(也叫HEAP表)
    	会在磁盘上形成一个.frm的表结构文件，表的数据并不是以文件的形式存放在磁盘上。数据存放在内存中
    访问速度快。需要考虑内存上数据的持久性
    	索引类型：默认是hash索引，也支持BTree索引
    	不支持变长表列，即使指定了VARCHAR列，实际存储时也会转成CHAR，导致部分内存浪费
    	表级锁，因此并发写入的性能较低
    	使用场合：
    		速度要求快，临时数据，丢失以后，不会对项目整体造成负面影响，或者影响不大
    		保存数据分析中产生的中间数据
    	和临时表不同：CREATE TEMPORARY TABLE创建的表，可以使用任何存储引擎，和memory表不是一回事
    	临时表，只在单个连接中可以，当连接断开时，临时表也将不复存在

