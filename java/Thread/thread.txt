1. 什么是线程？
	线程是操作系统能够进行运算调度的最小单位，被包含在进程中，是进程中的实际运作单位。程序员可以通过它进
行多处理器编程，你可以使用多线程对运算密集型任务提速。比如，如果一个线程完成一个任务要100毫秒，那么用十个线程完成改任务只需10毫秒。Java在语言层面对多线程提供了卓越的支持，它也是一个很好的卖点。
	单线程如同只雇佣一个服务员的餐厅，多线程如同雇佣多个程序员的餐厅

2. 什么是进程?
	进程是处于运行中的程序，具有一定的功能，进程是系统进行资源分配和调度的一个独立单位
	特征：
	①：独立性，每个进程都拥有自己独立的地址空间
	②：动态性，进程和程序的区别：程序只是一个静态的指令集合，进程是一个正在系统中活动的指令集合(时间)
进程拥有自己的生命周期和各种不同的状态
	③：并发性，多个进程可以在单个处理器上并发执行

3. 并行(parallel)和并发(concurrency)的区别：
	并行：同一时刻，有多条指令在多个处理器上同时执行
	并发：同一时刻只有一条指令执行，但多个进程指令被快读轮换执行，使得宏观上具有多个进程同时执行的效果


4. 线程和进程的区别?
	线程是进程的子集，一个进程可以拥有很多线程，每条线程并发执行不同的任务。不同进程使用不同的存储空间，
而所有的线程共享共享同一进程的相同的内存空间(进程代码段，进程的公有数据).
	每个线程都拥有独立的堆栈，程序计数器和自己的局部变量但不拥有系统资源。线程执行是抢占式的

5. java中怎么实现线程?
	java.lang.Thread的实例就是一个线程，Thread类实现了Runnable接口
	java只支持单继承，使用Runnable还可以继承其他类
	①:继承Thread类，重写run方法(线程需要完成的任务,线程执行体)，多个线程之间无法共享线程类的实例变量
		主线程的执行体不是由run确定的，而是由main方法确定的
		获取当前Thread对象： this
	②：实现Runnable接口，一Runnable实现类的对象作为Thread的target来创建Thread对象,可以共享线程类的实例
		实际的线程对象任然是Thread实例，只是该Thread线程负责执行target的run方法
		获取当前Thread对象： Thread.CurrentThread
	③：使用Callable和Future创建线程
		java5，提供了Callable接口，call方法作为线程执行体，比run更强大：
			call方法有返回值
			call方法可以声明抛出异常
		Callable接口并不是Runnable接口的子接口，所以Callable对象不能直接作为Thread的target。Future
	接口代表Callable接口中call方法的返回值，提供了一个FutureTask实现类，该实现类实现了Future接口和
	Runnable接口，可作为Thread类的target
		Callable接口有泛型限制，接口里的泛型形参类型与call方法的返回值类型相同
		创建并启动有返回值的线程的步骤：
		①：创建Callable接口的实现类，并实现call方法作为线程执行体，有返回值
		②：创建Callable实现类的实例，使用FutureTask类来包装Callable对象，封装了该Callable对象的call
	方法的返回值
		③：使用FutureTask对象作为Thread对象的target创建并启动新线程
		④：调用FutureTask对象的get(阻塞方法，可以指定超时时间)方法获得子线程执行结束后的返回值

6. start和run方法
	start用来启动新创建的线程，内部调用了run方法，直接调用run方法不会自动新线程，只是会在原线程中执行


	